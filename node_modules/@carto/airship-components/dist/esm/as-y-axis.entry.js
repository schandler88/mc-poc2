import { r as registerInstance, g as getElement } from './core-a69618da.js';
import './readable-number-b11b551f.js';
import './index-3374c455.js';
import './index-87eae0eb.js';
import { y as yAxisService } from './y-axis.service-efb05fbe.js';

const YAxis = class {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Lower limit of the axis
         *
         * @type {number}
         * @memberof YAxis
         */
        this.from = 0;
        /**
         * Upper limit of the axis
         *
         * @type {Number[]}
         * @memberof YAxis
         */
        this.to = 0;
        /**
         * Use this attribute to decide if the widget should be rerendered on window resize
         * Defaults to true
         */
        this.responsive = true;
        this._resizeListener = this._resizeListener.bind(this);
    }
    componentWillLoad() {
        addEventListener('resize', this._resizeListener);
    }
    componentDidUnload() {
        removeEventListener('resize', this._resizeListener);
    }
    render() {
        const element = this.element.previousElementSibling;
        const scale = [this.from, this.to];
        yAxisService.renderYAxis(element, scale);
    }
    _resizeListener() {
        if (this.responsive) {
            this.element.forceUpdate();
        }
    }
    get element() { return getElement(this); }
    static get style() { return ".y-axis{--widget-axis-text-color:var(--as--color--type-01,#2c2c2c);--widget-axis-line-color:var(--as--color--ui-05,#b3b3b3)}.y-axis .tick text{width:30px;fill:var(--widget-axis-text-color);white-space:pre}.y-axis .tick line{stroke:var(--widget-axis-line-color);opacity:.1}.y-axis .tick line.zero{opacity:.5}.y-axis .domain{display:none}"; }
};

export { YAxis as as_y_axis };
