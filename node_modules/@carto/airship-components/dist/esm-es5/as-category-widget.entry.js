var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { r as registerInstance, c as createEvent, h } from './core-a69618da.js';
import { c as contentFragment } from './content.fragment-e220039c.js';
import { r as readableNumber } from './readable-number-b11b551f.js';
import { s as shadeOrBlend } from './styles-b283ec9e.js';
var OTHER_CATEGORY_COLOR = '#747474';
var OTHER_CATEGORY_NAME = 'Other';
var CategoryWidget = /** @class */ (function () {
    function class_1(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Array of categories to display in the widget.
         * Each category should include a `name` and a `value`.
         * You can also override the bar color for each category with `color`.
         *
         * @type {object[]}
         * @memberof CategoryWidget
         */
        this.categories = [];
        /**
         * Disable category selection in Widget
         *
         * @type {string}
         * @memberof CategoryWidget
         */
        this.disableInteractivity = false;
        /**
         * If this property receives a function, it will be used to format the numbers (eg. for adding $ or â‚¬).
         *
         * @type {function (value: number)}
         * @memberof RangeSlider
         */
        this.valueFormatter = this.defaultFormatter;
        /**
         * If truthy, it'll show a button to clear selected categories when there are any. Default value is `false`.
         *
         * @type {boolean}
         * @memberof CategoryWidget
         */
        this.showClearButton = false;
        /**
         * If truthy, it'll render the heading and component's description. Default value is `true`.
         *
         * @type {boolean}
         * @memberof CategoryWidget
         */
        this.showHeader = true;
        /**
         * If truthy, we'll use the sum of all categories' value to render the bar percentage.
         * By default, we use the maximum category value to render the bar percentage.
         *
         * @type {boolean}
         * @memberof CategoryWidget
         */
        this.useTotalPercentage = false;
        /**
         * The number of visible categories without aggregation.
         *
         * @type {number}
         * @memberof CategoryWidget
         */
        this.visibleCategories = Infinity;
        /**
         * Boolean property to control the widget loading state. If true, a spinner is shown.
         */
        this.isLoading = false;
        /**
         * Text shown in the header subtitle when there's an error
         */
        this.error = '';
        /**
         * Extended error description, only shown when error is present
         */
        this.errorDescription = '';
        /**
         * Message shown in header when no data is available
         */
        this.noDataHeaderMessage = 'NO DATA AVAILABLE';
        /**
         * Message shown in body when no data is available
         */
        this.noDataBodyMessage = 'There is no data to display.';
        this.selectedCategories = [];
        this._firstDataSupplied = false;
        this.categoriesSelected = createEvent(this, "categoriesSelected", 7);
    }
    class_1.prototype.onDataChange = function () {
        if (!this._firstDataSupplied) {
            this._firstDataSupplied = Boolean(this.categories && this.categories.length);
        }
    };
    class_1.prototype.componentWillLoad = function () {
        this._firstDataSupplied = Boolean(this.categories && this.categories.length);
    };
    /**
     * Default formatting function. Makes the value a readable number and
     * converts it into a string. Useful to compose with your own formatting
     * function.
     *
     * @memberof CategoryWidget
     */
    class_1.prototype.defaultFormatter = function (value) {
        return "" + readableNumber(value);
    };
    /**
     * Get current selected categories
     *
     * @returns
     * @memberof CategoryWidget
     */
    class_1.prototype.getSelectedCategories = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.selectedCategories];
            });
        });
    };
    /**
     * Clear current selected categories
     *
     * @returns
     * @memberof CategoryWidget
     */
    class_1.prototype.clearSelection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.selectedCategories.length) {
                    return [2 /*return*/];
                }
                this.selectedCategories = [];
                this._onCategoriesChanged();
                return [2 /*return*/];
            });
        });
    };
    class_1.prototype.render = function () {
        if (this._isLoading()) {
            return (h("as-category-widget-placeholder", null, this._renderHeader()));
        }
        return [
            this._renderHeader(),
            this._renderSelection(),
            this._renderContent(),
        ];
    };
    class_1.prototype._renderSelection = function () {
        var _this = this;
        if (this._isLoading() || this._isEmpty() || this.error || !this.showClearButton) {
            return '';
        }
        var selectedCount = this.selectedCategories.length;
        return h("as-widget-selection", { selection: (selectedCount || 'All') + " selected", clearText: 'Clear selection', showClear: selectedCount > 0, onClear: function () { return _this.clearSelection(); } });
    };
    class_1.prototype._renderHeader = function () {
        if (!this.showHeader) {
            return;
        }
        return h("as-widget-header", { header: this.heading, subheader: this.description, "is-empty": this._isEmpty(), "is-loading": this._isLoading(), error: this.error, "no-data-message": this.noDataHeaderMessage });
    };
    class_1.prototype._renderContent = function () {
        return contentFragment(false, this.error, this._isEmpty(), this.heading, this.errorDescription, this.noDataBodyMessage, this._renderCategoryList());
    };
    class_1.prototype._renderCategoryList = function () {
        var cssClasses = {
            'as-category-widget__list': true,
            'as-category-widget__list--disabled': this.disableInteractivity
        };
        return h("ul", { class: cssClasses }, this._renderCategories());
    };
    class_1.prototype._renderCategories = function () {
        var _this = this;
        var moreCategoriesThanVisible = this.categories.length > this.visibleCategories;
        var _a = this._parseCategories(), categories = _a.categories, otherCategory = _a.otherCategory;
        var otherCategoryTemplate;
        var categoriesToRender = categories.slice(0, this.visibleCategories);
        var maximumValue = this.useTotalPercentage
            ? this._getCategoriesTotalValue(this.categories)
            : this._getCategoriesMaximumValue(categories, Boolean(otherCategory));
        if (otherCategory || moreCategoriesThanVisible) {
            otherCategoryTemplate = this._renderOtherCategory(otherCategory, { maximumValue: maximumValue });
        }
        return [
            categoriesToRender.map(function (category) { return _this._renderCategory(category, { maximumValue: maximumValue }); }),
            otherCategoryTemplate
        ];
    };
    class_1.prototype._renderCategory = function (category, options) {
        var _this = this;
        var isOther = options.isOther, maximumValue = options.maximumValue;
        var isSelected = this._isSelected(category.name);
        var isAnyCategorySelected = this.selectedCategories.length > 0;
        var barColor = this._getBarColor(category.color, { isSelected: isSelected, isOther: isOther });
        var progressStyles = {
            backgroundColor: barColor ? barColor : "var(--as--category-bar--color)",
            width: (category.value / maximumValue) * 100 + "%"
        };
        var cssClasses = {
            'as-category-widget__category': true,
            'as-category-widget__category--not-selected': isAnyCategorySelected && (!isSelected || isOther),
            'as-category-widget__category--other': isOther,
            'as-category-widget__category--selected': isSelected
        };
        var displayValue = this.valueFormatter(category.value);
        return (h("li", { class: cssClasses, onClick: function () { return _this._toggleCategory(category); } }, h("p", { class: 'as-category-widget__info as-body' }, h("div", { class: 'as-category-widget__title' }, category.name), displayValue), h("div", { class: 'as-category-widget__bar' }, h("div", { class: 'as-category-widget__bar-value', style: progressStyles }))));
    };
    class_1.prototype._renderOtherCategory = function (category, options) {
        var categoryData = category || {
            name: 'Other',
            value: this._getCategoriesTotalValue(this.categories.slice(this.visibleCategories, this.categories.length))
        };
        return this._renderCategory(categoryData, { maximumValue: options.maximumValue, isOther: true });
    };
    class_1.prototype._isSelected = function (categoryName) {
        return this.selectedCategories.includes(categoryName);
    };
    class_1.prototype._toggleCategory = function (category) {
        if (this.disableInteractivity) {
            return;
        }
        this.selectedCategories = this._isSelected(category.name)
            ? this.selectedCategories.filter(function (currentCategory) { return currentCategory !== category.name; })
            : this.selectedCategories.concat([category.name]);
        this._onCategoriesChanged();
    };
    class_1.prototype._onCategoriesChanged = function () {
        this.categoriesSelected.emit(this.selectedCategories);
    };
    class_1.prototype._getCategoriesMaximumValue = function (categories, otherCategoryPresent) {
        if (otherCategoryPresent === void 0) { otherCategoryPresent = false; }
        return this._getVisibleCategories(categories, otherCategoryPresent).reduce(function (maximum, currentCategory) { return currentCategory.value > maximum ? currentCategory.value : maximum; }, 0);
    };
    class_1.prototype._getCategoriesTotalValue = function (categories) {
        return categories.reduce(function (sum, currentCategory) { return currentCategory.value + sum; }, 0);
    };
    class_1.prototype._getBarColor = function (color, options) {
        if (options === void 0) { options = {}; }
        if (options.isOther) {
            return OTHER_CATEGORY_COLOR;
        }
        if (options.isSelected) {
            return shadeOrBlend(-0.16, color);
        }
        return color;
    };
    class_1.prototype._parseCategories = function () {
        var otherCategory = this.categories.find(function (category) { return category.name === OTHER_CATEGORY_NAME; });
        if (otherCategory) {
            var categories = this.categories
                .filter(function (category) { return category.name !== otherCategory.name; });
            return { categories: categories, otherCategory: otherCategory };
        }
        return { categories: this.categories };
    };
    class_1.prototype._getVisibleCategories = function (parsedCategories, otherCategoryPresent) {
        if (otherCategoryPresent) {
            return parsedCategories;
        }
        return parsedCategories.slice(0, this.visibleCategories);
    };
    class_1.prototype._isLoading = function () {
        return (!this._firstDataSupplied || this.isLoading) && !this.error;
    };
    class_1.prototype._isEmpty = function () {
        return this.categories && !this.categories.length;
    };
    Object.defineProperty(class_1, "watchers", {
        get: function () {
            return {
                "categories": ["onDataChange"]
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(class_1, "style", {
        get: function () { return "as-category-widget{--as--category-bar--background-color:var(--as--color--ui-02,#f5f5f5);--as--category-bar--color:var(--as--color--complementary,#47db99);--as--category-widget--background-color:var(--as--color--ui-01,#fff);--as--category-widget--bar--height:4px;--as--category-widget--description--color:var(--as--color--type-02,#747474);display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;min-width:228px;height:100%;overflow-y:auto;background:var(--as--category-widget--background-color)}as-category-widget .content{min-height:100px}as-category-widget as-widget-header{padding-top:6px}as-category-widget .as-category-widget__count{color:var(--as--category-widget--description--color)}as-category-widget .as-category-widget__list{-ms-flex:1;flex:1;margin:0;padding:0;overflow-y:auto;list-style:none}as-category-widget .as-category-widget__list.as-category-widget__list--disabled li{pointer-events:none}as-category-widget .as-category-widget__footer{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}as-category-widget .as-category-widget__list+.as-category-widget__footer{margin-top:16px}as-category-widget .as-category-widget__info{display:-ms-flexbox;display:flex;-ms-flex-pack:justify;justify-content:space-between}as-category-widget .as-category-widget__title{-ms-flex:1;flex:1;width:100%;padding-right:8px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}as-category-widget .as-category-widget__bar{position:relative;width:100%;height:var(--as--category-widget--bar--height);border-radius:2px;background-color:var(--as--category-bar--background-color)}as-category-widget .as-category-widget__bar-value{position:absolute;left:0;max-width:100%;height:var(--as--category-widget--bar--height);-webkit-transition:background .2s ease,opacity .5s ease;transition:background .2s ease,opacity .5s ease;border-radius:2px}as-category-widget .as-category-widget__category{margin-bottom:8px;cursor:pointer}as-category-widget .as-category-widget__category--other{pointer-events:none}as-category-widget .as-category-widget__category--not-selected{opacity:.5}as-category-widget .as-category-widget__category:not(.as-category-widget__category--selected):hover .as-category-widget__bar-value{opacity:.6}"; },
        enumerable: true,
        configurable: true
    });
    return class_1;
}());
export { CategoryWidget as as_category_widget };
