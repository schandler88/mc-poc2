var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { r as registerInstance, c as createEvent, h, H as Host } from './core-a69618da.js';
import { i as icon } from './icons-1379931f.js';
import { t as timeFormat, u as defaultLocale, l as linear, e as event } from './index-3374c455.js';
import { D as DEFAULT_BAR_COLOR, a as DEFAULT_BACKGROUND_BAR_COLOR, A as AUTO_FORMAT, b as DEFAULT_NUMBER_FORMAT, c as DEFAULT_DATE_FORMAT } from './constants-2231320f.js';
function sameData(first, second) {
    if (first.length !== second.length) {
        return false;
    }
    for (var i = 0; i < first.length; i++) {
        if (first[i].start !== second[i].start ||
            first[i].end !== second[i].end ||
            first[i].value !== second[i].value ||
            first[i].color !== second[i].color) {
            return false;
        }
    }
    return true;
}
var SCRUBBER_SIZE = 6;
var TimeSeriesWidget = /** @class */ (function () {
    function class_1(hostRef) {
        registerInstance(this, hostRef);
        /**
         * Toggles displaying title and description
         *
         * @type {boolean}
         * @memberof HistogramWidget
         */
        this.showHeader = true;
        /**
         * Disables selection brushes and events for the widget
         *
         * @type {boolean}
         * @memberof HistogramWidget
         */
        this.disableInteractivity = false;
        /**
         * Histogram data to be displayed
         *
         * @type {HistogramData[]}
         * @memberof HistogramWidget
         */
        this.data = [];
        /**
         * Histogram data to be displayed
         *
         * @type {HistogramData[]}
         * @memberof HistogramWidget
         */
        this.backgroundData = [];
        /**
         * Override color for the histogram bars
         *
         * @type {string}
         * @memberof HistogramWidget
         */
        this.color = DEFAULT_BAR_COLOR;
        /**
         * Override color for the selected histogram bars
         *
         * @type {string}
         * @memberof HistogramWidget
         */
        this.unselectedColor = DEFAULT_BACKGROUND_BAR_COLOR;
        /**
         * Use this attribute to put the widget in "loading mode".
         * When loading mode is active, a spinner will be shown and the data will be hidden.
         */
        this.isLoading = false;
        /**
         * Use this widget to put the widget in "error mode".
         * When error mode is active. The header will display the given text.
         * And the body will be display the errorDescription instead any data.
         */
        this.error = '';
        /**
         * Extended error description, only shown when error is present
         */
        this.errorDescription = '';
        /**
         * Message shown in header when no data is available
         */
        this.noDataHeaderMessage = 'NO DATA AVAILABLE';
        /**
         * Message shown in body when no data is available
         */
        this.noDataBodyMessage = 'There is no data to display.';
        /**
         * Use this attribute to decide if the widget should be rerendered on window resize.
         * Defaults to true.
         */
        this.responsive = true;
        /**
         * This attribute is the percentage of progress elapsed on an animation.
         */
        this.progress = 0;
        /**
         * Whether the animation is playing or not.
         */
        this.playing = false;
        /**
         * Whether it should have animated properties or not. Disabling this makes this look
         * like a histogra widget with time capabilities
         */
        this.animated = false;
        /**
         * This string will be parsed by d3-time-format (https://github.com/d3/d3-time-format)
         * and will be used to format the graph's x-axis
         */
        this.timeFormat = AUTO_FORMAT;
        /**
         * Text rendered inside the clear selection button
         */
        this.clearText = 'Clear selection';
        /**
         * This prop lets you provide the range of the y-axis so it's not automatically calculated with
         * data or backgroundData. It always starts at 0, you can provide the top value.
         *
         * @memberof HistogramWidget
         */
        this.range = null;
        /**
         * This lets you disable the animations for the bars when showing / updating the data
         *
         * @type {boolean}
         * @memberof HistogramWidget
         */
        this.disableAnimation = false;
        /**
         * This prop is a proxy to some d3-axis options for the X Axis
         *
         * @type {AxisOptions}
         * @memberof TimeSeriesWidget
         */
        this.xAxisOptions = {};
        /**
         * This prop is a proxy to some d3-axis options for the Y Axis
         *
         * @type {AxisOptions}
         * @memberof TimeSeriesWidget
         */
        this.yAxisOptions = {};
        this.axisFormatter = this.axisFormatter.bind(this);
        this.play = createEvent(this, "play", 7);
        this.pause = createEvent(this, "pause", 7);
        this.selectionChanged = createEvent(this, "selectionChanged", 7);
        this.seek = createEvent(this, "seek", 7);
    }
    class_1.prototype.onDataChanged = function (newData, oldData) {
        if (sameData(newData, oldData)) {
            return;
        }
        else {
            this.timeFormat = this.timeFormat === AUTO_FORMAT
                ? typeof this.data[0].start === 'number' ? DEFAULT_NUMBER_FORMAT : DEFAULT_DATE_FORMAT
                : this.timeFormat;
        }
    };
    class_1.prototype.onBackgroundDataChanged = function (newData) {
        this._backgroundData = newData;
    };
    class_1.prototype.onProgressChanged = function () {
        this._render();
    };
    class_1.prototype.onTimeFormatChanged = function (newFormat) {
        this._formatter = timeFormat(newFormat);
        if (this.histogram) {
            this.histogram.forceUpdate();
        }
    };
    class_1.prototype.onTimeFormatLocaleChanged = function (newLocale) {
        try {
            defaultLocale(newLocale);
            if (this.timeFormat) {
                this.onTimeFormatChanged(this.timeFormat);
            }
        }
        catch (e) {
            throw new Error('Invalid time format.');
        }
    };
    /**
     * Proxy to as-histogram-widget defaultFormatter()
     *
     * @memberof TimeSeriesWidget
     */
    class_1.prototype.defaultFormatter = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.histogram.defaultFormatter(data)];
            });
        });
    };
    /**
     * Proxy to as-histogram-widget getSelection()
     *
     * @returns {number[]|string[]}
     * @memberof TimeSeriesWidget
     */
    class_1.prototype.getSelection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.histogram.getSelection()];
            });
        });
    };
    /**
     * Proxy to as-histogram-widget setSelection()
     *
     * @param {number[] | null} values
     * @memberof TimeSeriesWidget
     */
    class_1.prototype.setSelection = function (values) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.histogram.setSelection(values);
                return [2 /*return*/];
            });
        });
    };
    /**
     * Proxy to as-histogram-widget clearSelection()
     *
     * @memberof TimeSeriesWidget
     */
    class_1.prototype.clearSelection = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.histogram.clearSelection();
                return [2 /*return*/];
            });
        });
    };
    /**
     * Proxy to as-histogram-widget xFormatter method
     * @param value
     */
    class_1.prototype.xFormatter = function (value) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.histogram.xFormatter(value)];
            });
        });
    };
    class_1.prototype.componentWillLoad = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.onDataChanged(this.data, []);
                this.onBackgroundDataChanged(this.backgroundData);
                return [2 /*return*/];
            });
        });
    };
    class_1.prototype.componentDidLoad = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.timeFormatLocale) {
                            defaultLocale(this.timeFormatLocale);
                        }
                        this._formatter = timeFormat(this.timeFormat);
                        this.histogram.addEventListener('selectionInput', function (evt) {
                            if (evt.detail === null) {
                                _this._selection = null;
                            }
                            else {
                                _this._selection = evt.detail.selection;
                            }
                            _this._render();
                        });
                        this.histogram.addEventListener('selectionChanged', function (evt) {
                            evt.stopPropagation();
                            if (evt.detail === null) {
                                _this.selectionChanged.emit(null);
                                return;
                            }
                            // We have to coerce to Array<number | Date> because it can also be string[] for categorical histograms
                            var selectedDates = evt.detail.selection;
                            _this.selectionChanged.emit(selectedDates);
                            _this._render();
                        });
                        this.histogram.addEventListener('drawParametersChanged', function (evt) {
                            _this._renderOptions = evt.detail;
                            _this._render();
                        });
                        _a = this;
                        return [4 /*yield*/, this.histogram.getSelection()];
                    case 1:
                        _a._selection = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    class_1.prototype.render = function () {
        var _this = this;
        var classes = {
            'as-time-series--animated': this.animated
        };
        return h(Host, { class: classes }, this._renderButton(), h("as-histogram-widget", { ref: function (ref) { _this.histogram = ref; }, heading: this.heading, description: this.description, showHeader: this.showHeader, showClear: this.showClear, disableInteractivity: this.disableInteractivity, data: this.data, backgroundData: this._backgroundData, color: this.color, unselectedColor: this.unselectedColor, colorRange: this.colorRange, axisFormatter: this.axisFormatter, tooltipFormatter: this.tooltipFormatter || this._tooltipFormatter.bind(this), xLabel: this.xLabel, yLabel: this.yLabel, isLoading: this.isLoading, error: this.error, errorDescription: this.errorDescription, noDataHeaderMessage: this.noDataHeaderMessage, noDataBodyMessage: this.noDataBodyMessage, responsive: this.responsive, clearText: this.clearText, range: this.range, disableAnimation: this.disableAnimation, xAxisOptions: this.xAxisOptions, yAxisOptions: this.yAxisOptions }));
    };
    class_1.prototype.axisFormatter = function (value) {
        return this._formatter(value);
    };
    class_1.prototype._tooltipFormatter = function (data) {
        return [
            this.axisFormatter(data.start) + " - " + this.axisFormatter(data.end),
            "" + data.value
        ];
    };
    class_1.prototype._renderButton = function () {
        if (!this.animated) {
            return null;
        }
        var classes = {
            'as-time-series--play-button': true,
            'as-time-series--play-button-hidden': !this.data.length || this.isLoading || !!this.error,
            'as-time-series--play-button-x-label': !!this.xLabel
        };
        return h("div", { class: classes, onClick: this._playPauseClick.bind(this) }, icon(this.playing ? 'PAUSE' : 'PLAY', 'var(--as--color--primary)', { width: '32px', height: '32px' }));
    };
    class_1.prototype._playPauseClick = function () {
        this.playing ? this.pause.emit() : this.play.emit();
    };
    class_1.prototype._render = function () {
        var _this = this;
        if (!this._renderOptions) {
            return;
        }
        var _a = this._renderOptions, container = _a.container, height = _a.height, width = _a.width, padding = _a.padding, xScale = _a.xScale, binsScale = _a.binsScale, handleWidth = _a.handleWidth;
        var timeSeries = container.select('.as-time-series--g');
        if (!this.animated) {
            if (!timeSeries.empty()) {
                timeSeries.remove();
            }
            return;
        }
        var left = container.node().getBoundingClientRect().left;
        var X_PADDING = padding[0], Y_PADDING = padding[1];
        var progressScale = linear().domain([0, 100]);
        var trackOffset = 0;
        if (this._selection) {
            var selection = this._selection.map(function (e) { return xScale(binsScale(e)); });
            trackOffset = handleWidth / 2;
            progressScale.range([
                selection[0] + trackOffset + (SCRUBBER_SIZE / 2),
                selection[1] - trackOffset - (SCRUBBER_SIZE / 2)
            ]);
        }
        else {
            progressScale.range([0, width - X_PADDING]);
        }
        var xPos = progressScale(this.progress);
        container.on('click', function () {
            var evt = event;
            var pctX = Math.round(progressScale.invert(evt.clientX - left - X_PADDING + 8));
            // This probably means that there's a selection and you're clicking outside of it
            if (pctX > 100 || pctX < 0) {
                return;
            }
            _this.seek.emit(pctX);
        });
        if (timeSeries.empty()) {
            timeSeries = container
                .append('g')
                .attr('class', 'as-time-series--g');
            timeSeries.append('line')
                .attr('class', 'as-time-series--preview')
                .attr('stroke-width', 4)
                .attr('stroke', 'gray')
                .attr('opacity', '0');
            timeSeries.append('line')
                .attr('class', 'as-time-series--line')
                .attr('stroke-width', 4);
            timeSeries.append('circle')
                .attr('class', 'as-time-series--scrubber')
                .attr('r', SCRUBBER_SIZE)
                .attr('stroke-width', 0);
            timeSeries.append('line')
                .attr('class', 'as-time-series--track')
                .attr('stroke-width', 16)
                .attr('stroke', 'black')
                .attr('opacity', '0')
                .on('mouseleave', function () {
                _this._lastMousePosition = -1;
                timeSeries.select('.as-time-series--preview')
                    .attr('opacity', '0');
            });
        }
        timeSeries.select('.as-time-series--line')
            .attr('x1', progressScale(0) - (SCRUBBER_SIZE / 2))
            .attr('x2', xPos)
            .attr('y1', height - Y_PADDING)
            .attr('y2', height - Y_PADDING);
        timeSeries.select('.as-time-series--track')
            .attr('y1', height - Y_PADDING)
            .attr('y2', height - Y_PADDING)
            .attr('x1', progressScale(0) + trackOffset)
            .attr('x2', progressScale(100) - trackOffset)
            .on('mousemove', function () {
            var evt = event;
            _this._lastMousePosition = evt.clientX - left - X_PADDING + 8;
            if (_this._lastMousePosition > progressScale(_this.progress)) {
                timeSeries.select('.as-time-series--preview')
                    .attr('x2', _this._lastMousePosition)
                    .attr('opacity', '1');
            }
        });
        timeSeries.select('.as-time-series--preview')
            .attr('x1', xPos - (SCRUBBER_SIZE / 2))
            .attr('y1', height - Y_PADDING)
            .attr('y2', height - Y_PADDING)
            .attr('opacity', function () {
            if (_this._lastMousePosition > xPos) {
                return '1';
            }
            return '0';
        });
        timeSeries.select('.as-time-series--scrubber')
            .attr('transform', "translate(" + (xPos - (SCRUBBER_SIZE / 2)) + "," + (height - Y_PADDING) + ")");
    };
    Object.defineProperty(class_1, "watchers", {
        get: function () {
            return {
                "data": ["onDataChanged"],
                "backgroundData": ["onBackgroundDataChanged"],
                "progress": ["onProgressChanged"],
                "timeFormat": ["onTimeFormatChanged"],
                "timeFormatLocale": ["onTimeFormatLocaleChanged"]
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(class_1, "style", {
        get: function () { return "as-time-series-widget{--as--time-series--line-color:var(--as--color--primary,#1785fb);--as-histogram-widget--background-color:var(--as--color--ui-01);display:-ms-flexbox;display:flex;-ms-flex-align:end;align-items:flex-end;height:100%;background:var(--as-histogram-widget--background-color,#fff)}as-time-series-widget as-histogram-widget{overflow:unset}as-time-series-widget.as-time-series--animated as-histogram-widget .content,as-time-series-widget.as-time-series--animated as-histogram-widget as-widget-header,as-time-series-widget.as-time-series--animated as-histogram-widget as-widget-selection{margin-left:-32px}as-time-series-widget .as-time-series--play-button{margin-bottom:2px;cursor:pointer}as-time-series-widget .as-time-series--play-button-hidden{opacity:0}as-time-series-widget .as-time-series--play-button-x-label{margin-bottom:27px}as-time-series-widget .as-time-series--line,as-time-series-widget .as-time-series--scrubber{stroke:var(--as--time-series--line-color);fill:var(--as--time-series--line-color)}as-time-series-widget .as-time-series--line,as-time-series-widget .as-time-series--scrubber,as-time-series-widget .as-time-series--track{cursor:pointer}"; },
        enumerable: true,
        configurable: true
    });
    return class_1;
}());
export { TimeSeriesWidget as as_time_series_widget };
