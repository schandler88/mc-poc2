import { h } from "@stencil/core";
import readableNumber from '../../utils/readable-number';
import { shadeOrBlend } from '../../utils/styles';
import contentFragment from '../common/content.fragment';
const OTHER_CATEGORY_COLOR = '#747474';
const OTHER_CATEGORY_NAME = 'Other';
/**
 * Category Widget
 *
 * @export
 * @class CategoryWidget
 */
export class CategoryWidget {
    constructor() {
        /**
         * Array of categories to display in the widget.
         * Each category should include a `name` and a `value`.
         * You can also override the bar color for each category with `color`.
         *
         * @type {object[]}
         * @memberof CategoryWidget
         */
        this.categories = [];
        /**
         * Disable category selection in Widget
         *
         * @type {string}
         * @memberof CategoryWidget
         */
        this.disableInteractivity = false;
        /**
         * If this property receives a function, it will be used to format the numbers (eg. for adding $ or â‚¬).
         *
         * @type {function (value: number)}
         * @memberof RangeSlider
         */
        this.valueFormatter = this.defaultFormatter;
        /**
         * If truthy, it'll show a button to clear selected categories when there are any. Default value is `false`.
         *
         * @type {boolean}
         * @memberof CategoryWidget
         */
        this.showClearButton = false;
        /**
         * If truthy, it'll render the heading and component's description. Default value is `true`.
         *
         * @type {boolean}
         * @memberof CategoryWidget
         */
        this.showHeader = true;
        /**
         * If truthy, we'll use the sum of all categories' value to render the bar percentage.
         * By default, we use the maximum category value to render the bar percentage.
         *
         * @type {boolean}
         * @memberof CategoryWidget
         */
        this.useTotalPercentage = false;
        /**
         * The number of visible categories without aggregation.
         *
         * @type {number}
         * @memberof CategoryWidget
         */
        this.visibleCategories = Infinity;
        /**
         * Boolean property to control the widget loading state. If true, a spinner is shown.
         */
        this.isLoading = false;
        /**
         * Text shown in the header subtitle when there's an error
         */
        this.error = '';
        /**
         * Extended error description, only shown when error is present
         */
        this.errorDescription = '';
        /**
         * Message shown in header when no data is available
         */
        this.noDataHeaderMessage = 'NO DATA AVAILABLE';
        /**
         * Message shown in body when no data is available
         */
        this.noDataBodyMessage = 'There is no data to display.';
        this.selectedCategories = [];
        this._firstDataSupplied = false;
    }
    onDataChange() {
        if (!this._firstDataSupplied) {
            this._firstDataSupplied = Boolean(this.categories && this.categories.length);
        }
    }
    componentWillLoad() {
        this._firstDataSupplied = Boolean(this.categories && this.categories.length);
    }
    /**
     * Default formatting function. Makes the value a readable number and
     * converts it into a string. Useful to compose with your own formatting
     * function.
     *
     * @memberof CategoryWidget
     */
    defaultFormatter(value) {
        return `${readableNumber(value)}`;
    }
    /**
     * Get current selected categories
     *
     * @returns
     * @memberof CategoryWidget
     */
    async getSelectedCategories() {
        return this.selectedCategories;
    }
    /**
     * Clear current selected categories
     *
     * @returns
     * @memberof CategoryWidget
     */
    async clearSelection() {
        if (!this.selectedCategories.length) {
            return;
        }
        this.selectedCategories = [];
        this._onCategoriesChanged();
    }
    render() {
        if (this._isLoading()) {
            return (h("as-category-widget-placeholder", null, this._renderHeader()));
        }
        return [
            this._renderHeader(),
            this._renderSelection(),
            this._renderContent(),
        ];
    }
    _renderSelection() {
        if (this._isLoading() || this._isEmpty() || this.error || !this.showClearButton) {
            return '';
        }
        const selectedCount = this.selectedCategories.length;
        return h("as-widget-selection", { selection: `${selectedCount || 'All'} selected`, clearText: 'Clear selection', showClear: selectedCount > 0, onClear: () => this.clearSelection() });
    }
    _renderHeader() {
        if (!this.showHeader) {
            return;
        }
        return h("as-widget-header", { header: this.heading, subheader: this.description, "is-empty": this._isEmpty(), "is-loading": this._isLoading(), error: this.error, "no-data-message": this.noDataHeaderMessage });
    }
    _renderContent() {
        return contentFragment(false, this.error, this._isEmpty(), this.heading, this.errorDescription, this.noDataBodyMessage, this._renderCategoryList());
    }
    _renderCategoryList() {
        const cssClasses = {
            'as-category-widget__list': true,
            'as-category-widget__list--disabled': this.disableInteractivity
        };
        return h("ul", { class: cssClasses }, this._renderCategories());
    }
    _renderCategories() {
        const moreCategoriesThanVisible = this.categories.length > this.visibleCategories;
        const { categories, otherCategory } = this._parseCategories();
        let otherCategoryTemplate;
        const categoriesToRender = categories.slice(0, this.visibleCategories);
        const maximumValue = this.useTotalPercentage
            ? this._getCategoriesTotalValue(this.categories)
            : this._getCategoriesMaximumValue(categories, Boolean(otherCategory));
        if (otherCategory || moreCategoriesThanVisible) {
            otherCategoryTemplate = this._renderOtherCategory(otherCategory, { maximumValue });
        }
        return [
            categoriesToRender.map((category) => this._renderCategory(category, { maximumValue })),
            otherCategoryTemplate
        ];
    }
    _renderCategory(category, options) {
        const { isOther, maximumValue } = options;
        const isSelected = this._isSelected(category.name);
        const isAnyCategorySelected = this.selectedCategories.length > 0;
        const barColor = this._getBarColor(category.color, { isSelected, isOther });
        const progressStyles = {
            backgroundColor: barColor ? barColor : `var(--as--category-bar--color)`,
            width: `${(category.value / maximumValue) * 100}%`
        };
        const cssClasses = {
            'as-category-widget__category': true,
            'as-category-widget__category--not-selected': isAnyCategorySelected && (!isSelected || isOther),
            'as-category-widget__category--other': isOther,
            'as-category-widget__category--selected': isSelected
        };
        const displayValue = this.valueFormatter(category.value);
        return (h("li", { class: cssClasses, onClick: () => this._toggleCategory(category) },
            h("p", { class: 'as-category-widget__info as-body' },
                h("div", { class: 'as-category-widget__title' }, category.name),
                displayValue),
            h("div", { class: 'as-category-widget__bar' },
                h("div", { class: 'as-category-widget__bar-value', style: progressStyles }))));
    }
    _renderOtherCategory(category, options) {
        const categoryData = category || {
            name: 'Other',
            value: this._getCategoriesTotalValue(this.categories.slice(this.visibleCategories, this.categories.length))
        };
        return this._renderCategory(categoryData, { maximumValue: options.maximumValue, isOther: true });
    }
    _isSelected(categoryName) {
        return this.selectedCategories.includes(categoryName);
    }
    _toggleCategory(category) {
        if (this.disableInteractivity) {
            return;
        }
        this.selectedCategories = this._isSelected(category.name)
            ? this.selectedCategories.filter((currentCategory) => currentCategory !== category.name)
            : [...this.selectedCategories, category.name];
        this._onCategoriesChanged();
    }
    _onCategoriesChanged() {
        this.categoriesSelected.emit(this.selectedCategories);
    }
    _getCategoriesMaximumValue(categories, otherCategoryPresent = false) {
        return this._getVisibleCategories(categories, otherCategoryPresent).reduce((maximum, currentCategory) => currentCategory.value > maximum ? currentCategory.value : maximum, 0);
    }
    _getCategoriesTotalValue(categories) {
        return categories.reduce((sum, currentCategory) => currentCategory.value + sum, 0);
    }
    _getBarColor(color, options = {}) {
        if (options.isOther) {
            return OTHER_CATEGORY_COLOR;
        }
        if (options.isSelected) {
            return shadeOrBlend(-0.16, color);
        }
        return color;
    }
    _parseCategories() {
        const otherCategory = this.categories.find((category) => category.name === OTHER_CATEGORY_NAME);
        if (otherCategory) {
            const categories = this.categories
                .filter((category) => category.name !== otherCategory.name);
            return { categories, otherCategory };
        }
        return { categories: this.categories };
    }
    _getVisibleCategories(parsedCategories, otherCategoryPresent) {
        if (otherCategoryPresent) {
            return parsedCategories;
        }
        return parsedCategories.slice(0, this.visibleCategories);
    }
    _isLoading() {
        return (!this._firstDataSupplied || this.isLoading) && !this.error;
    }
    _isEmpty() {
        return this.categories && !this.categories.length;
    }
    static get is() { return "as-category-widget"; }
    static get originalStyleUrls() { return {
        "$": ["./as-category-widget.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["as-category-widget.css"]
    }; }
    static get properties() { return {
        "categories": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "object[]",
                "resolved": "object[]",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{object[]}",
                        "name": "type"
                    }, {
                        "text": "CategoryWidget",
                        "name": "memberof"
                    }],
                "text": "Array of categories to display in the widget.\nEach category should include a `name` and a `value`.\nYou can also override the bar color for each category with `color`."
            },
            "defaultValue": "[]"
        },
        "defaultBarColor": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{string}",
                        "name": "type"
                    }, {
                        "text": "CategoryWidget",
                        "name": "memberof"
                    }],
                "text": "Default color to draw the bars. Default value is `#47DB99`."
            },
            "attribute": "default-bar-color",
            "reflect": false
        },
        "description": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{string}",
                        "name": "type"
                    }, {
                        "text": "CategoryWidget",
                        "name": "memberof"
                    }],
                "text": "Description text of the widget"
            },
            "attribute": "description",
            "reflect": false
        },
        "disableInteractivity": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{string}",
                        "name": "type"
                    }, {
                        "text": "CategoryWidget",
                        "name": "memberof"
                    }],
                "text": "Disable category selection in Widget"
            },
            "attribute": "disable-interactivity",
            "reflect": false,
            "defaultValue": "false"
        },
        "valueFormatter": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(value: number) => string",
                "resolved": "(value: number) => string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{function (value: number)}",
                        "name": "type"
                    }, {
                        "text": "RangeSlider",
                        "name": "memberof"
                    }],
                "text": "If this property receives a function, it will be used to format the numbers (eg. for adding $ or \u20AC)."
            },
            "defaultValue": "this.defaultFormatter"
        },
        "heading": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{string}",
                        "name": "type"
                    }, {
                        "text": "CategoryWidget",
                        "name": "memberof"
                    }],
                "text": "Heading text of the widget"
            },
            "attribute": "heading",
            "reflect": false
        },
        "showClearButton": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{boolean}",
                        "name": "type"
                    }, {
                        "text": "CategoryWidget",
                        "name": "memberof"
                    }],
                "text": "If truthy, it'll show a button to clear selected categories when there are any. Default value is `false`."
            },
            "attribute": "show-clear-button",
            "reflect": false,
            "defaultValue": "false"
        },
        "showHeader": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{boolean}",
                        "name": "type"
                    }, {
                        "text": "CategoryWidget",
                        "name": "memberof"
                    }],
                "text": "If truthy, it'll render the heading and component's description. Default value is `true`."
            },
            "attribute": "show-header",
            "reflect": false,
            "defaultValue": "true"
        },
        "useTotalPercentage": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{boolean}",
                        "name": "type"
                    }, {
                        "text": "CategoryWidget",
                        "name": "memberof"
                    }],
                "text": "If truthy, we'll use the sum of all categories' value to render the bar percentage.\nBy default, we use the maximum category value to render the bar percentage."
            },
            "attribute": "use-total-percentage",
            "reflect": false,
            "defaultValue": "false"
        },
        "visibleCategories": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{number}",
                        "name": "type"
                    }, {
                        "text": "CategoryWidget",
                        "name": "memberof"
                    }],
                "text": "The number of visible categories without aggregation."
            },
            "attribute": "visible-categories",
            "reflect": false,
            "defaultValue": "Infinity"
        },
        "isLoading": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Boolean property to control the widget loading state. If true, a spinner is shown."
            },
            "attribute": "is-loading",
            "reflect": false,
            "defaultValue": "false"
        },
        "error": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Text shown in the header subtitle when there's an error"
            },
            "attribute": "error",
            "reflect": false,
            "defaultValue": "''"
        },
        "errorDescription": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Extended error description, only shown when error is present"
            },
            "attribute": "error-description",
            "reflect": false,
            "defaultValue": "''"
        },
        "noDataHeaderMessage": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Message shown in header when no data is available"
            },
            "attribute": "no-data-header-message",
            "reflect": false,
            "defaultValue": "'NO DATA AVAILABLE'"
        },
        "noDataBodyMessage": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Message shown in body when no data is available"
            },
            "attribute": "no-data-body-message",
            "reflect": false,
            "defaultValue": "'There is no data to display.'"
        }
    }; }
    static get states() { return {
        "selectedCategories": {},
        "_firstDataSupplied": {}
    }; }
    static get events() { return [{
            "method": "categoriesSelected",
            "name": "categoriesSelected",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [{
                        "text": "categoriesSelected",
                        "name": "event"
                    }, {
                        "text": "{EventEmitter<string[]>}",
                        "name": "type"
                    }, {
                        "text": "CategoryWidget",
                        "name": "memberof"
                    }],
                "text": "Fired when selected categories changed or selected categories are cleared."
            },
            "complexType": {
                "original": "string[]",
                "resolved": "string[]",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "getSelectedCategories": {
            "complexType": {
                "signature": "() => Promise<string[]>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<string[]>"
            },
            "docs": {
                "text": "Get current selected categories",
                "tags": [{
                        "name": "returns",
                        "text": undefined
                    }, {
                        "name": "memberof",
                        "text": "CategoryWidget"
                    }]
            }
        },
        "clearSelection": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Clear current selected categories",
                "tags": [{
                        "name": "returns",
                        "text": undefined
                    }, {
                        "name": "memberof",
                        "text": "CategoryWidget"
                    }]
            }
        }
    }; }
    static get watchers() { return [{
            "propName": "categories",
            "methodName": "onDataChange"
        }]; }
}
