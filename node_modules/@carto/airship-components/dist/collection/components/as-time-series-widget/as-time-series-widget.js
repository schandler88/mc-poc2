import { h, Host } from "@stencil/core";
import { scaleLinear } from 'd3-scale';
import { event as d3event } from 'd3-selection';
import { timeFormat, timeFormatDefaultLocale } from 'd3-time-format';
import { icon } from '../../utils/icons';
import { AUTO_FORMAT, DEFAULT_BACKGROUND_BAR_COLOR, DEFAULT_BAR_COLOR, DEFAULT_DATE_FORMAT, DEFAULT_NUMBER_FORMAT } from '../common/constants';
import { sameData } from './utils/data.service';
const SCRUBBER_SIZE = 6;
/**
 * Time series
 *
 * @export
 * @class HistogramWidget
 */
export class TimeSeriesWidget {
    constructor() {
        /**
         * Toggles displaying title and description
         *
         * @type {boolean}
         * @memberof HistogramWidget
         */
        this.showHeader = true;
        /**
         * Disables selection brushes and events for the widget
         *
         * @type {boolean}
         * @memberof HistogramWidget
         */
        this.disableInteractivity = false;
        /**
         * Histogram data to be displayed
         *
         * @type {HistogramData[]}
         * @memberof HistogramWidget
         */
        this.data = [];
        /**
         * Histogram data to be displayed
         *
         * @type {HistogramData[]}
         * @memberof HistogramWidget
         */
        this.backgroundData = [];
        /**
         * Override color for the histogram bars
         *
         * @type {string}
         * @memberof HistogramWidget
         */
        this.color = DEFAULT_BAR_COLOR;
        /**
         * Override color for the selected histogram bars
         *
         * @type {string}
         * @memberof HistogramWidget
         */
        this.unselectedColor = DEFAULT_BACKGROUND_BAR_COLOR;
        /**
         * Use this attribute to put the widget in "loading mode".
         * When loading mode is active, a spinner will be shown and the data will be hidden.
         */
        this.isLoading = false;
        /**
         * Use this widget to put the widget in "error mode".
         * When error mode is active. The header will display the given text.
         * And the body will be display the errorDescription instead any data.
         */
        this.error = '';
        /**
         * Extended error description, only shown when error is present
         */
        this.errorDescription = '';
        /**
         * Message shown in header when no data is available
         */
        this.noDataHeaderMessage = 'NO DATA AVAILABLE';
        /**
         * Message shown in body when no data is available
         */
        this.noDataBodyMessage = 'There is no data to display.';
        /**
         * Use this attribute to decide if the widget should be rerendered on window resize.
         * Defaults to true.
         */
        this.responsive = true;
        /**
         * This attribute is the percentage of progress elapsed on an animation.
         */
        this.progress = 0;
        /**
         * Whether the animation is playing or not.
         */
        this.playing = false;
        /**
         * Whether it should have animated properties or not. Disabling this makes this look
         * like a histogra widget with time capabilities
         */
        this.animated = false;
        /**
         * This string will be parsed by d3-time-format (https://github.com/d3/d3-time-format)
         * and will be used to format the graph's x-axis
         */
        this.timeFormat = AUTO_FORMAT;
        /**
         * Text rendered inside the clear selection button
         */
        this.clearText = 'Clear selection';
        /**
         * This prop lets you provide the range of the y-axis so it's not automatically calculated with
         * data or backgroundData. It always starts at 0, you can provide the top value.
         *
         * @memberof HistogramWidget
         */
        this.range = null;
        /**
         * This lets you disable the animations for the bars when showing / updating the data
         *
         * @type {boolean}
         * @memberof HistogramWidget
         */
        this.disableAnimation = false;
        /**
         * This prop is a proxy to some d3-axis options for the X Axis
         *
         * @type {AxisOptions}
         * @memberof TimeSeriesWidget
         */
        this.xAxisOptions = {};
        /**
         * This prop is a proxy to some d3-axis options for the Y Axis
         *
         * @type {AxisOptions}
         * @memberof TimeSeriesWidget
         */
        this.yAxisOptions = {};
        this.axisFormatter = this.axisFormatter.bind(this);
    }
    onDataChanged(newData, oldData) {
        if (sameData(newData, oldData)) {
            return;
        }
        else {
            this.timeFormat = this.timeFormat === AUTO_FORMAT
                ? typeof this.data[0].start === 'number' ? DEFAULT_NUMBER_FORMAT : DEFAULT_DATE_FORMAT
                : this.timeFormat;
        }
    }
    onBackgroundDataChanged(newData) {
        this._backgroundData = newData;
    }
    onProgressChanged() {
        this._render();
    }
    onTimeFormatChanged(newFormat) {
        this._formatter = timeFormat(newFormat);
        if (this.histogram) {
            this.histogram.forceUpdate();
        }
    }
    onTimeFormatLocaleChanged(newLocale) {
        try {
            timeFormatDefaultLocale(newLocale);
            if (this.timeFormat) {
                this.onTimeFormatChanged(this.timeFormat);
            }
        }
        catch (e) {
            throw new Error('Invalid time format.');
        }
    }
    /**
     * Proxy to as-histogram-widget defaultFormatter()
     *
     * @memberof TimeSeriesWidget
     */
    async defaultFormatter(data) {
        return this.histogram.defaultFormatter(data);
    }
    /**
     * Proxy to as-histogram-widget getSelection()
     *
     * @returns {number[]|string[]}
     * @memberof TimeSeriesWidget
     */
    async getSelection() {
        return this.histogram.getSelection();
    }
    /**
     * Proxy to as-histogram-widget setSelection()
     *
     * @param {number[] | null} values
     * @memberof TimeSeriesWidget
     */
    async setSelection(values) {
        this.histogram.setSelection(values);
    }
    /**
     * Proxy to as-histogram-widget clearSelection()
     *
     * @memberof TimeSeriesWidget
     */
    async clearSelection() {
        this.histogram.clearSelection();
    }
    /**
     * Proxy to as-histogram-widget xFormatter method
     * @param value
     */
    async xFormatter(value) {
        return this.histogram.xFormatter(value);
    }
    async componentWillLoad() {
        this.onDataChanged(this.data, []);
        this.onBackgroundDataChanged(this.backgroundData);
    }
    async componentDidLoad() {
        if (this.timeFormatLocale) {
            timeFormatDefaultLocale(this.timeFormatLocale);
        }
        this._formatter = timeFormat(this.timeFormat);
        this.histogram.addEventListener('selectionInput', (evt) => {
            if (evt.detail === null) {
                this._selection = null;
            }
            else {
                this._selection = evt.detail.selection;
            }
            this._render();
        });
        this.histogram.addEventListener('selectionChanged', (evt) => {
            evt.stopPropagation();
            if (evt.detail === null) {
                this.selectionChanged.emit(null);
                return;
            }
            // We have to coerce to Array<number | Date> because it can also be string[] for categorical histograms
            const selectedDates = evt.detail.selection;
            this.selectionChanged.emit(selectedDates);
            this._render();
        });
        this.histogram.addEventListener('drawParametersChanged', (evt) => {
            this._renderOptions = evt.detail;
            this._render();
        });
        this._selection = await this.histogram.getSelection();
    }
    render() {
        const classes = {
            'as-time-series--animated': this.animated
        };
        return h(Host, { class: classes },
            this._renderButton(),
            h("as-histogram-widget", { ref: (ref) => { this.histogram = ref; }, heading: this.heading, description: this.description, showHeader: this.showHeader, showClear: this.showClear, disableInteractivity: this.disableInteractivity, data: this.data, backgroundData: this._backgroundData, color: this.color, unselectedColor: this.unselectedColor, colorRange: this.colorRange, axisFormatter: this.axisFormatter, tooltipFormatter: this.tooltipFormatter || this._tooltipFormatter.bind(this), xLabel: this.xLabel, yLabel: this.yLabel, isLoading: this.isLoading, error: this.error, errorDescription: this.errorDescription, noDataHeaderMessage: this.noDataHeaderMessage, noDataBodyMessage: this.noDataBodyMessage, responsive: this.responsive, clearText: this.clearText, range: this.range, disableAnimation: this.disableAnimation, xAxisOptions: this.xAxisOptions, yAxisOptions: this.yAxisOptions }));
    }
    axisFormatter(value) {
        return this._formatter(value);
    }
    _tooltipFormatter(data) {
        return [
            `${this.axisFormatter(data.start)} - ${this.axisFormatter(data.end)}`,
            `${data.value}`
        ];
    }
    _renderButton() {
        if (!this.animated) {
            return null;
        }
        const classes = {
            'as-time-series--play-button': true,
            'as-time-series--play-button-hidden': !this.data.length || this.isLoading || !!this.error,
            'as-time-series--play-button-x-label': !!this.xLabel
        };
        return h("div", { class: classes, onClick: this._playPauseClick.bind(this) }, icon(this.playing ? 'PAUSE' : 'PLAY', 'var(--as--color--primary)', { width: '32px', height: '32px' }));
    }
    _playPauseClick() {
        this.playing ? this.pause.emit() : this.play.emit();
    }
    _render() {
        if (!this._renderOptions) {
            return;
        }
        const { container, height, width, padding, xScale, binsScale, handleWidth } = this._renderOptions;
        let timeSeries = container.select('.as-time-series--g');
        if (!this.animated) {
            if (!timeSeries.empty()) {
                timeSeries.remove();
            }
            return;
        }
        const { left } = container.node().getBoundingClientRect();
        const [X_PADDING, Y_PADDING] = padding;
        const progressScale = scaleLinear().domain([0, 100]);
        let trackOffset = 0;
        if (this._selection) {
            const selection = this._selection.map((e) => xScale(binsScale(e)));
            trackOffset = handleWidth / 2;
            progressScale.range([
                selection[0] + trackOffset + (SCRUBBER_SIZE / 2),
                selection[1] - trackOffset - (SCRUBBER_SIZE / 2)
            ]);
        }
        else {
            progressScale.range([0, width - X_PADDING]);
        }
        const xPos = progressScale(this.progress);
        container.on('click', () => {
            const evt = d3event;
            const pctX = Math.round(progressScale.invert(evt.clientX - left - X_PADDING + 8));
            // This probably means that there's a selection and you're clicking outside of it
            if (pctX > 100 || pctX < 0) {
                return;
            }
            this.seek.emit(pctX);
        });
        if (timeSeries.empty()) {
            timeSeries = container
                .append('g')
                .attr('class', 'as-time-series--g');
            timeSeries.append('line')
                .attr('class', 'as-time-series--preview')
                .attr('stroke-width', 4)
                .attr('stroke', 'gray')
                .attr('opacity', '0');
            timeSeries.append('line')
                .attr('class', 'as-time-series--line')
                .attr('stroke-width', 4);
            timeSeries.append('circle')
                .attr('class', 'as-time-series--scrubber')
                .attr('r', SCRUBBER_SIZE)
                .attr('stroke-width', 0);
            timeSeries.append('line')
                .attr('class', 'as-time-series--track')
                .attr('stroke-width', 16)
                .attr('stroke', 'black')
                .attr('opacity', '0')
                .on('mouseleave', () => {
                this._lastMousePosition = -1;
                timeSeries.select('.as-time-series--preview')
                    .attr('opacity', '0');
            });
        }
        timeSeries.select('.as-time-series--line')
            .attr('x1', progressScale(0) - (SCRUBBER_SIZE / 2))
            .attr('x2', xPos)
            .attr('y1', height - Y_PADDING)
            .attr('y2', height - Y_PADDING);
        timeSeries.select('.as-time-series--track')
            .attr('y1', height - Y_PADDING)
            .attr('y2', height - Y_PADDING)
            .attr('x1', progressScale(0) + trackOffset)
            .attr('x2', progressScale(100) - trackOffset)
            .on('mousemove', () => {
            const evt = d3event;
            this._lastMousePosition = evt.clientX - left - X_PADDING + 8;
            if (this._lastMousePosition > progressScale(this.progress)) {
                timeSeries.select('.as-time-series--preview')
                    .attr('x2', this._lastMousePosition)
                    .attr('opacity', '1');
            }
        });
        timeSeries.select('.as-time-series--preview')
            .attr('x1', xPos - (SCRUBBER_SIZE / 2))
            .attr('y1', height - Y_PADDING)
            .attr('y2', height - Y_PADDING)
            .attr('opacity', () => {
            if (this._lastMousePosition > xPos) {
                return '1';
            }
            return '0';
        });
        timeSeries.select('.as-time-series--scrubber')
            .attr('transform', `translate(${xPos - (SCRUBBER_SIZE / 2)},${height - Y_PADDING})`);
    }
    static get is() { return "as-time-series-widget"; }
    static get originalStyleUrls() { return {
        "$": ["./as-time-series-widget.scss"]
    }; }
    static get styleUrls() { return {
        "$": ["as-time-series-widget.css"]
    }; }
    static get properties() { return {
        "heading": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{string}",
                        "name": "type"
                    }, {
                        "text": "HistogramWidget",
                        "name": "memberof"
                    }],
                "text": "Title of the widget to be displayed"
            },
            "attribute": "heading",
            "reflect": false
        },
        "description": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{string}",
                        "name": "type"
                    }, {
                        "text": "HistogramWidget",
                        "name": "memberof"
                    }],
                "text": "Description of the widget to be displayed"
            },
            "attribute": "description",
            "reflect": false
        },
        "showHeader": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{boolean}",
                        "name": "type"
                    }, {
                        "text": "HistogramWidget",
                        "name": "memberof"
                    }],
                "text": "Toggles displaying title and description"
            },
            "attribute": "show-header",
            "reflect": false,
            "defaultValue": "true"
        },
        "showClear": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{boolean}",
                        "name": "type"
                    }, {
                        "text": "HistogramWidget",
                        "name": "memberof"
                    }],
                "text": "Display a clear button that clears the histogram selection."
            },
            "attribute": "show-clear",
            "reflect": false
        },
        "disableInteractivity": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{boolean}",
                        "name": "type"
                    }, {
                        "text": "HistogramWidget",
                        "name": "memberof"
                    }],
                "text": "Disables selection brushes and events for the widget"
            },
            "attribute": "disable-interactivity",
            "reflect": false,
            "defaultValue": "false"
        },
        "data": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "TimeSeriesData[]",
                "resolved": "TimeSeriesData[]",
                "references": {
                    "TimeSeriesData": {
                        "location": "import",
                        "path": "./interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{HistogramData[]}",
                        "name": "type"
                    }, {
                        "text": "HistogramWidget",
                        "name": "memberof"
                    }],
                "text": "Histogram data to be displayed"
            },
            "defaultValue": "[]"
        },
        "backgroundData": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "TimeSeriesData[]",
                "resolved": "TimeSeriesData[]",
                "references": {
                    "TimeSeriesData": {
                        "location": "import",
                        "path": "./interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{HistogramData[]}",
                        "name": "type"
                    }, {
                        "text": "HistogramWidget",
                        "name": "memberof"
                    }],
                "text": "Histogram data to be displayed"
            },
            "defaultValue": "[]"
        },
        "color": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{string}",
                        "name": "type"
                    }, {
                        "text": "HistogramWidget",
                        "name": "memberof"
                    }],
                "text": "Override color for the histogram bars"
            },
            "attribute": "color",
            "reflect": false,
            "defaultValue": "DEFAULT_BAR_COLOR"
        },
        "unselectedColor": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{string}",
                        "name": "type"
                    }, {
                        "text": "HistogramWidget",
                        "name": "memberof"
                    }],
                "text": "Override color for the selected histogram bars"
            },
            "attribute": "unselected-color",
            "reflect": false,
            "defaultValue": "DEFAULT_BACKGROUND_BAR_COLOR"
        },
        "colorRange": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "HistogramColorRange[]",
                "resolved": "HistogramColorRange[]",
                "references": {
                    "HistogramColorRange": {
                        "location": "import",
                        "path": "../as-histogram-widget/interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{HistogramColorRange[]}",
                        "name": "type"
                    }, {
                        "text": "HistogramWidget",
                        "name": "memberof"
                    }],
                "text": "Color range for histogram data"
            }
        },
        "tooltipFormatter": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "(value: TimeSeriesData) => string",
                "resolved": "(value: TimeSeriesData) => string",
                "references": {
                    "TimeSeriesData": {
                        "location": "import",
                        "path": "./interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{(TimeSeriesData) => string}",
                        "name": "type"
                    }, {
                        "text": "HistogramWidget",
                        "name": "memberof"
                    }],
                "text": "Function that formats the tooltip. Receives TimeSeriesData and outputs a string"
            }
        },
        "xLabel": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Label the x axis of the histogram with the given string."
            },
            "attribute": "x-label",
            "reflect": false
        },
        "yLabel": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Label the y axis of the histogram with the given string."
            },
            "attribute": "y-label",
            "reflect": false
        },
        "isLoading": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Use this attribute to put the widget in \"loading mode\".\nWhen loading mode is active, a spinner will be shown and the data will be hidden."
            },
            "attribute": "is-loading",
            "reflect": false,
            "defaultValue": "false"
        },
        "error": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Use this widget to put the widget in \"error mode\".\nWhen error mode is active. The header will display the given text.\nAnd the body will be display the errorDescription instead any data."
            },
            "attribute": "error",
            "reflect": false,
            "defaultValue": "''"
        },
        "errorDescription": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Extended error description, only shown when error is present"
            },
            "attribute": "error-description",
            "reflect": false,
            "defaultValue": "''"
        },
        "noDataHeaderMessage": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Message shown in header when no data is available"
            },
            "attribute": "no-data-header-message",
            "reflect": false,
            "defaultValue": "'NO DATA AVAILABLE'"
        },
        "noDataBodyMessage": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Message shown in body when no data is available"
            },
            "attribute": "no-data-body-message",
            "reflect": false,
            "defaultValue": "'There is no data to display.'"
        },
        "responsive": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Use this attribute to decide if the widget should be rerendered on window resize.\nDefaults to true."
            },
            "attribute": "responsive",
            "reflect": false,
            "defaultValue": "true"
        },
        "progress": {
            "type": "number",
            "mutable": false,
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This attribute is the percentage of progress elapsed on an animation."
            },
            "attribute": "progress",
            "reflect": false,
            "defaultValue": "0"
        },
        "playing": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Whether the animation is playing or not."
            },
            "attribute": "playing",
            "reflect": false,
            "defaultValue": "false"
        },
        "animated": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Whether it should have animated properties or not. Disabling this makes this look\nlike a histogra widget with time capabilities"
            },
            "attribute": "animated",
            "reflect": true,
            "defaultValue": "false"
        },
        "timeFormat": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "This string will be parsed by d3-time-format (https://github.com/d3/d3-time-format)\nand will be used to format the graph's x-axis"
            },
            "attribute": "time-format",
            "reflect": false,
            "defaultValue": "AUTO_FORMAT"
        },
        "timeFormatLocale": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "TimeLocaleDefinition",
                "resolved": "TimeLocaleDefinition",
                "references": {
                    "TimeLocaleDefinition": {
                        "location": "import",
                        "path": "d3-time-format"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Setting this property will make the date formatter be sensitive to locales. The format\nis described on https://github.com/d3/d3-time-format"
            }
        },
        "clearText": {
            "type": "string",
            "mutable": false,
            "complexType": {
                "original": "string",
                "resolved": "string",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [],
                "text": "Text rendered inside the clear selection button"
            },
            "attribute": "clear-text",
            "reflect": false,
            "defaultValue": "'Clear selection'"
        },
        "range": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "[number, number]",
                "resolved": "[number, number]",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "HistogramWidget",
                        "name": "memberof"
                    }],
                "text": "This prop lets you provide the range of the y-axis so it's not automatically calculated with\ndata or backgroundData. It always starts at 0, you can provide the top value."
            },
            "defaultValue": "null"
        },
        "disableAnimation": {
            "type": "boolean",
            "mutable": false,
            "complexType": {
                "original": "boolean",
                "resolved": "boolean",
                "references": {}
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{boolean}",
                        "name": "type"
                    }, {
                        "text": "HistogramWidget",
                        "name": "memberof"
                    }],
                "text": "This lets you disable the animations for the bars when showing / updating the data"
            },
            "attribute": "disable-animation",
            "reflect": false,
            "defaultValue": "false"
        },
        "xAxisOptions": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "AxisOptions",
                "resolved": "AxisOptions",
                "references": {
                    "AxisOptions": {
                        "location": "import",
                        "path": "../as-histogram-widget/interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{AxisOptions}",
                        "name": "type"
                    }, {
                        "text": "TimeSeriesWidget",
                        "name": "memberof"
                    }],
                "text": "This prop is a proxy to some d3-axis options for the X Axis"
            },
            "defaultValue": "{}"
        },
        "yAxisOptions": {
            "type": "unknown",
            "mutable": false,
            "complexType": {
                "original": "AxisOptions",
                "resolved": "AxisOptions",
                "references": {
                    "AxisOptions": {
                        "location": "import",
                        "path": "../as-histogram-widget/interfaces"
                    }
                }
            },
            "required": false,
            "optional": false,
            "docs": {
                "tags": [{
                        "text": "{AxisOptions}",
                        "name": "type"
                    }, {
                        "text": "TimeSeriesWidget",
                        "name": "memberof"
                    }],
                "text": "This prop is a proxy to some d3-axis options for the Y Axis"
            },
            "defaultValue": "{}"
        }
    }; }
    static get events() { return [{
            "method": "play",
            "name": "play",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "User clicks the play button"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "pause",
            "name": "pause",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "User clicks the pause button"
            },
            "complexType": {
                "original": "any",
                "resolved": "any",
                "references": {}
            }
        }, {
            "method": "selectionChanged",
            "name": "selectionChanged",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "This method proxies the selectionChanged event on the underlying graph, but parses it into\na Date"
            },
            "complexType": {
                "original": "Array<Date | number>",
                "resolved": "(number | Date)[]",
                "references": {
                    "Array": {
                        "location": "global"
                    },
                    "Date": {
                        "location": "global"
                    }
                }
            }
        }, {
            "method": "seek",
            "name": "seek",
            "bubbles": true,
            "cancelable": true,
            "composed": true,
            "docs": {
                "tags": [],
                "text": "The user has seeked the animation to this percentage."
            },
            "complexType": {
                "original": "number",
                "resolved": "number",
                "references": {}
            }
        }]; }
    static get methods() { return {
        "defaultFormatter": {
            "complexType": {
                "signature": "(data: HistogramData) => Promise<any>",
                "parameters": [{
                        "tags": [],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    },
                    "HistogramData": {
                        "location": "import",
                        "path": "../as-histogram-widget/interfaces"
                    }
                },
                "return": "Promise<any>"
            },
            "docs": {
                "text": "Proxy to as-histogram-widget defaultFormatter()",
                "tags": [{
                        "name": "memberof",
                        "text": "TimeSeriesWidget"
                    }]
            }
        },
        "getSelection": {
            "complexType": {
                "signature": "() => Promise<any>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<any>"
            },
            "docs": {
                "text": "Proxy to as-histogram-widget getSelection()",
                "tags": [{
                        "name": "returns",
                        "text": undefined
                    }, {
                        "name": "memberof",
                        "text": "TimeSeriesWidget"
                    }]
            }
        },
        "setSelection": {
            "complexType": {
                "signature": "(values: number[]) => Promise<void>",
                "parameters": [{
                        "tags": [{
                                "text": "values",
                                "name": "param"
                            }],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Proxy to as-histogram-widget setSelection()",
                "tags": [{
                        "name": "param",
                        "text": "values"
                    }, {
                        "name": "memberof",
                        "text": "TimeSeriesWidget"
                    }]
            }
        },
        "clearSelection": {
            "complexType": {
                "signature": "() => Promise<void>",
                "parameters": [],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<void>"
            },
            "docs": {
                "text": "Proxy to as-histogram-widget clearSelection()",
                "tags": [{
                        "name": "memberof",
                        "text": "TimeSeriesWidget"
                    }]
            }
        },
        "xFormatter": {
            "complexType": {
                "signature": "(value: any) => Promise<any>",
                "parameters": [{
                        "tags": [{
                                "text": "value",
                                "name": "param"
                            }],
                        "text": ""
                    }],
                "references": {
                    "Promise": {
                        "location": "global"
                    }
                },
                "return": "Promise<any>"
            },
            "docs": {
                "text": "Proxy to as-histogram-widget xFormatter method",
                "tags": [{
                        "name": "param",
                        "text": "value"
                    }]
            }
        }
    }; }
    static get watchers() { return [{
            "propName": "data",
            "methodName": "onDataChanged"
        }, {
            "propName": "backgroundData",
            "methodName": "onBackgroundDataChanged"
        }, {
            "propName": "progress",
            "methodName": "onProgressChanged"
        }, {
            "propName": "timeFormat",
            "methodName": "onTimeFormatChanged"
        }, {
            "propName": "timeFormatLocale",
            "methodName": "onTimeFormatLocaleChanged"
        }]; }
}
